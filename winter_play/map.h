//
// Created by shenjiawei on 2023/1/4.
//

#ifndef WINTER_PLAY_MAP_H
#define WINTER_PLAY_MAP_H

#include "winter_playh.h"


SDL_Rect Map_Rect;
int map[15][20];
typedef struct BRICK {
    int colour;
    enum elements ele;
} bricking;
bricking hello[15][20], testing[15][20];
int lv1[15][20] =
        {{200, 200, 200, 0, 0, 0,  0,  0,  0, 200, 200, 200, 0,  0,  0,  0,  0,  0, 0, 0},
         {200, 200, 0,  0, 0, 0,  0,  0,  0, 200, 200, 200, 0,  0,  0,  0,  0,  0, 0, 0},
         {200, 0,  0,  0, 0, 0,  0,  0,  0, 0,  200, 0,  0,  0,  0,  200, 200, 0, 0},
         {200, 0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  200, 200, 0,  0, 0},
         {200, 0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  200, 200, 0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 300, 300, 700, 0, 0,  0,  300, 300, 0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 300, 300, 700, 0, 0,  0,  300, 300, 0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 300, 300, 700, 0, 0,  0,  300, 300, 0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0},
         {0,  0,  0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0}
        };
int test1[15][20]
        = {
                {0, 100, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0, 0, 500, 0,  0,  0},
                {0,  100,  100,  100,  0,  0,  0,  0, 0, 0, 0, 0,  100, 100, 0, 0, 500, 700, 0,  0},
                {0,  100,  100,  100,  0,  0,  0,  0, 0, 0, 0, 0,  100, 0,  0, 0, 0,  700, 0,  0},
                {0,  100,  100,  100,  0,  0,  0,  0, 0, 0, 0, 700, 700, 0,  0, 0, 0,  700, 700, 0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 100, 700, 0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  600,  600,  600,  0,  300,  300,  300, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  600,  600,  600,  0,  300,  300,  300, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  600,  600,  600,  0,  300,  300,  300, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  600,  300,  600,  0,  300,  700,  300, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0},
                {0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0,  0,  0,  0}

        };

void DrawBricks(int arr[15][20]) {
    Map_Rect.w = 46;
    Map_Rect.h = 46;
    for (int row = 0; row < 20; row++)
        for (int column = 0; column < 10; column++) {
            Map_Rect.x = row * 48;
            Map_Rect.y = column * 48;
            if (arr[column][row] != 0) {
                SDL_RenderCopy(Renderer, bricks[arr[column][row]], NULL, &Map_Rect);
            }

        }

}

bool IsCopyClear() {
    bool flag = true;
    for (int row = 0; row < 20; row++)
        for (int column = 0; column < 10; column++) {
            if (copyq[column][row] != 0)flag = false;
        }
    return flag;
}

void Initial_The_Map() {
    for (int row = 0; row < 10; row++)
        for (int column = 0; column < 20; column++) {
            hello[row][column].colour = lv1[row][column];
            testing[row][column].colour = test1[row][column];
        }

};

void StructCopy(bricking arr[15][20]) {
    for (int row = 0; row < 10; row++)
        for (int column = 0; column < 20; column++)
            copyq[row][column] = arr[row][column].colour;
}

#endif//WINTER_PLAY_MAP_H
